#!/usr/bin/python

# Purpose:  File purge utility for AWS S3.

import datetime
import re
import sys
import os
import argparse
import subprocess
import time
import boto
import boto.s3


def main():
    p = argparse.ArgumentParser()

    p.add_argument("-profile", help="boto profile name", required=False)
    p.add_argument("-bucket", help="bucket name.  defaults to 'backups'", default="backups")
    p.add_argument("-verbose", help="output verbose information", action="store_true")

    args = p.parse_args()

    # Extracts an ISO 8601 format string from within any other string and captures it as group 1
    progRegex = re.compile('.*(\d{4}\-\d\d\-\d\d([tT][\d:\.]*)?)([zZ]|([+\-])(\d\d):?(\d\d))?\..*')

    # using a valid AWS profile open a connection to the bucket and extract all filenames.
    connection = boto.connect_s3(profile_name=args.profile)
    bucket = connection.get_bucket(args.bucket)

    # A map of keys to datetimes for later processing.
    files = {}
    for key in bucket.list():
        m = progRegex.match(key.name) # Matched an ISO 8601 datetime?
        if m: # Yup! Got one.
            files[key] = extractDateTime(m.group(1))

    if args.verbose: print files

    # Process the files that matched.


    
# Accepts a filename and returns a datetime that matches the ISO 8601 format
# Note the time is not required, just the date.
# If a proper ISO 8601 format is not present within the filename then nil is returned.
def extractDateTime(iso8601String):
            try:
                return datetime.datetime.strptime( iso8601String, "%Y-%m-%d" )
            except ValueError:
                try: 
                    return datetime.datetime.strptime( iso8601String, "%Y-%m-%dT%H:%M:%S" )
                except ValueError:
                    return nil
    

    
if __name__ == "__main__":
    main()

